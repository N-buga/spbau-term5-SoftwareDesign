	Мой выбор argparse как библиотеки для парсинга обусловлен несколькими причинами. Во-первых, её популярность. Первые же ссылки выдали мне именно туториалы всевозможных сортов об argspase. И только полсе всех них начали встречаться упоминания и о других библиотеках. Популярность библиотеки - большой плюс. Это значит, она достаточно удобна и уже хорошо изучена.
	Во-вторых, это одна из стандартных библиотек, по ней есть официальная документация. Такие документации обычно понятны и без ошибок.
	Есть ещё одна стандартная библиотека для парсинга командной строки - getopt. И по ней тоже есть документация. Однако по сравнению с argparse она кажется низкоуровневой. Самое очевидное - результат парсинга возвращается в виде списка пар. Это намного менее удобно, чем структура с полями-аргументами, как в argparse. Ещё, возвращаются только пары, которые встретились при разборе. То есть, если для какого-то аргумента есть значение по умолчанию, то сначала надо проверить, есть ли этот аргумент среди пар и только если нет, взять дефолтное значение. Это требует и времени и кода. В argparse же достаточно просто задать изначально дефолтное значение, а потом взять значение поля. И если этот аргумент нам не встретился при парсинге - то это значение будет дефолтным. getopt ещё по многим пунктам уступает argparse, но и этого уже достаточно.
	Ещё немного порывшись, я нашла библиотеку для парсинга pyparsing. Но она скорее предназначена для синтаксического анализа. И использовать её для моей задаче было бы как стрелять из пушки по воробьям. Её можно использовать для разбора любого пользовательского формата. Моя задача - более специфична. И на этой библиотеке будет сложнее написать обычный разбор командной строки, чем на argparse.
Поэтому, я, в итоге, выбрала argparse и осталась вполне довольна.
